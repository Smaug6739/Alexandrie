{"version":3,"file":"Categories.js","sourceRoot":"","sources":["../../src/classes/Categories.ts"],"names":[],"mappings":"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","sourcesContent":["import { Snowflake } from '../utils/Snowflake';\nimport db from '../models/db';\nimport type { Theme, Category } from '../types';\n\nconst idgen = new Snowflake(1661327668261);\n\nexport default class CategoriesClass {\n  public getAll() {\n    return new Promise((resolve, reject) => {\n      db.query<Theme[]>('SELECT * FROM main_categories ORDER BY `order`', [], (err, themes) => {\n        if (err) return reject('Internal database error.');\n        db.query<Category[]>('SELECT * FROM sub_categories ORDER BY `order`', [], (err, categories) => {\n          if (err) return reject('Internal database error.');\n          for (const theme of themes) {\n            theme.categories = categories.filter((c: Category) => c.parent_category === theme.path);\n          }\n          resolve(themes);\n        });\n      });\n    });\n  }\n\n  public addMainCategory(name: string, description: string, order: number, path: string, icon: string) {\n    return new Promise((resolve, reject) => {\n      const id = idgen.generate().toString();\n      if (!name) return reject(new Error('[MISSING_ARGUMENT] : name must be provided'));\n      if (!description) return reject(new Error('[MISSING_ARGUMENT] : description must be provided'));\n      if (!path) return reject(new Error('[MISSING_ARGUMENT] : path must be provided'));\n      db.query(\n        'INSERT INTO main_categories (id, name, description, `order`, path, icon) VALUES (?, ?, ?, ?, ?, ?)',\n        [id, name, description, order, path, icon],\n        err => {\n          if (err) return reject('Internal database error.');\n          else\n            resolve({\n              id,\n              name,\n              description,\n              order,\n              path,\n              icon,\n            });\n        },\n      );\n    });\n  }\n  public addSubCategory(name: string, description: string, order: number, path: string, icon: string, parent_category: string) {\n    return new Promise((resolve, reject) => {\n      if (!name) return reject(new Error('[MISSING_ARGUMENT] : name must be provided'));\n      if (!description) return reject(new Error('[MISSING_ARGUMENT] : description must be provided'));\n      if (!path) return reject(new Error('[MISSING_ARGUMENT] : path must be provided'));\n      if (!parent_category) return reject(new Error('[MISSING_ARGUMENT] : parent_category must be provided'));\n      const id = idgen.generate();\n      db.query(\n        'INSERT INTO sub_categories (id, name, description, `order`, path, icon, parent_category) VALUES (?, ?, ?, ?, ?, ?, ?)',\n        [id, name, description, order, path, icon, parent_category],\n        err => {\n          if (err) return reject('Internal database error.');\n          else\n            resolve({\n              id,\n              name,\n              description,\n              order,\n              path,\n              icon,\n              parent_category,\n            });\n        },\n      );\n    });\n  }\n  updateMainCategory(id: string, name: string, description: string, order: number, path: string, icon: string) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query<Theme[]>('SELECT * FROM main_categories WHERE id = ? LIMIT 1', [id], (err, result) => {\n        if (err) return reject('Internal database error.');\n        if (!result || !result[0]) return reject(new Error('[ERROR] : Invalid id'));\n        else {\n          if (!name) name = result[0].name;\n          if (!description) description = result[0].description;\n          if (!order) order = result[0].order;\n          if (!path) path = result[0].path;\n          if (!icon) icon = result[0].icon;\n          db.query(\n            'UPDATE main_categories SET name = ?, description = ?, `order` = ?, path = ?, icon = ? WHERE id = ?',\n            [name, description, order, path, icon, id],\n            err => {\n              if (err) return reject('Internal database error.');\n              else resolve(true);\n            },\n          );\n        }\n      });\n    });\n  }\n  public updateSubCategory(\n    id: string,\n    name: string,\n    description: string,\n    order: number,\n    path: string,\n    icon: string,\n    parent_category: string,\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query<Category[]>('SELECT * FROM sub_categories WHERE id = ? LIMIT 1', [id], (err, result) => {\n        if (err) return reject('Internal database error.');\n        if (!result || !result[0]) return reject(new Error('[ERROR] : Invalid id'));\n        else {\n          if (!name) name = result[0].name;\n          if (!description) description = result[0].description;\n          if (!order) order = result[0].order;\n          if (!path) path = result[0].path;\n          if (!icon) icon = result[0].icon;\n          if (!parent_category) parent_category = result[0].parent_category;\n          db.query(\n            'UPDATE sub_categories SET name = ?, description = ?, `order` = ?, path = ?, icon = ?, parent_category = ? WHERE id = ?',\n            [name, description, order, path, icon, parent_category, id],\n            err => {\n              if (err) return reject('Internal database error.');\n              else resolve(true);\n            },\n          );\n        }\n      });\n    });\n  }\n  public deleteMainCategory(id: string) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query('DELETE FROM main_categories WHERE id = ?', [id], err => {\n        if (err) return reject('Internal database error.');\n        else resolve(true);\n      });\n    });\n  }\n  public deleteSubCategory(id: string) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query('DELETE FROM sub_categories WHERE id = ?', [id], err => {\n        if (err) return reject('Internal database error.');\n        else resolve(true);\n      });\n    });\n  }\n}\n"]}