{"version":3,"file":"Articles.js","sourceRoot":"","sources":["../../src/classes/Articles.ts"],"names":[],"mappings":"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","sourcesContent":["import { Snowflake } from '../utils/Snowflake';\nimport db from '../models/db';\nimport type { Article } from '../types';\n\nconst idgen = new Snowflake(1661327668261);\n\nexport default class Articles {\n  public getAll() {\n    return new Promise(async (resolve, reject) => {\n      db.query<Article[]>('SELECT * FROM articles ORDER BY `name`', (err, result) => {\n        if (err) return reject('Internal database error.');\n        resolve(result);\n      });\n    });\n  }\n\n  public getAllByCategory(category: string) {\n    return new Promise((resolve, reject) => {\n      if (!category) return reject(new Error('[MISSING_ARGUMENT] : category must be provided'));\n      db.query<Article[]>('SELECT * FROM articles WHERE main_category = ? ORDER BY `name`', [category], (err, result) => {\n        if (err) return reject('Internal database error.');\n        resolve(result);\n      });\n    });\n  }\n  public add(\n    name: string,\n    path: string,\n    main_category: string,\n    sub_category: string,\n    description: string,\n    content_markdown: string,\n    content_html: string,\n    author: string,\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!name) return reject(new Error('[MISSING_ARGUMENT] : name must be provided'));\n      if (!main_category) return reject(new Error('[MISSING_ARGUMENT] : main_category must be provided'));\n      if (!sub_category) return reject(new Error('[MISSING_ARGUMENT] : sub_category must be provided'));\n      if (!description) return reject(new Error('[MISSING_ARGUMENT] : description must be provided'));\n      if (!content_markdown) return reject(new Error('[MISSING_ARGUMENT] : content_markdown must be provided'));\n      if (!content_html) return reject(new Error('[MISSING_ARGUMENT] : content_html must be provided'));\n      if (!author) return reject(new Error('[MISSING_ARGUMENT] : author must be provided'));\n      const time = Date.now();\n      const id = idgen.generate().toString();\n      db.query<Article[]>(\n        'INSERT INTO articles (`id`, `name`, `description`, `path`, `main_category`, `sub_category`, `content_html`, `content_markdown`, `created_timestamp`, `updated_timestamp`, `author_id`) VALUES(?,?,?,?,?,?,?,?,?,?,?)',\n        [id, name, description, path, main_category, sub_category, content_html, content_markdown, time, time, author],\n        err => {\n          if (err) return reject('Internal database error.');\n          resolve({\n            id,\n            path,\n            name,\n            main_category,\n            sub_category,\n            description,\n            content_html,\n            content_markdown,\n            created_timestamp: time.toString(),\n            updated_timestamp: time.toString(),\n            author_id: author,\n          });\n        },\n      );\n    });\n  }\n  public put(\n    id: string,\n    name: string,\n    description: string,\n    path: string,\n    main_category: string,\n    sub_category: string,\n    content_markdown: string,\n    content_html: string,\n  ) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query<Article[]>('SELECT * FROM articles WHERE id = ? LIMIT 1', [id], (err, result) => {\n        if (err) return reject('Internal database error.');\n        if (!result || !result[0]) return reject(new Error('[ERROR] : Invalid id'));\n        else {\n          if (!name) name = result[0].name;\n          if (!description) description = result[0].description;\n          if (!path) path = result[0].path;\n          if (!main_category) main_category = result[0].main_category;\n          if (!sub_category) sub_category = result[0].sub_category;\n          if (!content_markdown) content_markdown = result[0].content_markdown;\n          if (!content_html) content_html = result[0].content_html;\n          db.query<Article[]>(\n            'UPDATE articles SET `name` = ?, `description` = ?, `path` = ?, `main_category` = ?, `sub_category` = ?, `content_html` = ?, `content_markdown` = ?, `updated_timestamp` = ? WHERE `id` = ?',\n            [name, description, path, main_category, sub_category, content_html, content_markdown, Date.now(), id],\n            err => {\n              if (err) return reject('Internal database error.');\n              resolve(true);\n            },\n          );\n        }\n      });\n    });\n  }\n  public delete(id: string) {\n    return new Promise((resolve, reject) => {\n      if (!id) return reject(new Error('[MISSING_ARGUMENT] : id must be provided'));\n      db.query<Article[]>('DELETE FROM articles WHERE id = ?', [id], err => {\n        if (err) return reject('Internal database error.');\n        resolve(true);\n      });\n    });\n  }\n}\n"]}