{"version":3,"file":"multer.cdn.js","sourceRoot":"","sources":["../../src/middlewares/multer.cdn.ts"],"names":[],"mappings":";;;AAAA,+BAA4B;AAC5B,4DAA4B;AAG5B,MAAM,SAAS,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO;AAE3C,IAAK,gBAMJ;AAND,WAAK,gBAAgB;IACnB,qCAAmB,CAAA;IACnB,sCAAoB,CAAA;IACpB,qCAAmB,CAAA;IACnB,qCAAmB,CAAA;IACnB,uCAAqB,CAAA;AACvB,CAAC,EANI,gBAAgB,KAAhB,gBAAgB,QAMpB;AAED,MAAM,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC;IACjC,WAAW,EAAE,CAAC,CAAC,EAAE,IAAyB,EAAE,QAAkB,EAAE,EAAE;QAChE,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAoD,CAAC;QAC3E,IAAI,gBAAgB,CAAC,QAAQ,CAAC;YAAE,QAAQ,CAAC,IAAI,EAAE,GAAG,IAAA,WAAI,EAAC,SAAS,EAAE,6BAA6B,CAAC,EAAE,CAAC,CAAC;;YAC/F,QAAQ,CAAC,IAAI,EAAE,GAAG,IAAA,WAAI,EAAC,SAAS,EAAE,4BAA4B,CAAC,EAAE,CAAC,CAAC;IAC1E,CAAC;IACD,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAa,EAAE,QAAkB,EAAE,EAAE;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAoD,CAAC;QAC3E,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS;YAAE,QAAQ,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACzC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3B,CAAC;CACF,CAAC,CAAC;AAEH,kBAAe,IAAA,gBAAM,EAAC;IACpB,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE;QACN,QAAQ,EAAE,SAAS;KACpB;IACD,UAAU,EAAE,CAAC,CAAC,EAAE,IAAa,EAAE,EAAY,EAAE,EAAE;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAoD,CAAC;QAC3E,IAAI,gBAAgB,CAAC,QAAQ,CAAC;YAAE,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;YAC1C,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACvB,CAAC;CACF,CAAC,CAAC,MAAM,CAAC;IACR;QACE,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC;KACZ;CACF,CAAC,CAAC","sourcesContent":["import { join } from 'path';\nimport multer from 'multer';\nimport type { IObject } from '../types';\n\nconst tailleMax = 20 * 1024 * 1024; // 20MB\n\nenum MIME_TYPES_IMAGE {\n  'image/jpg' = 'jpg',\n  'image/jpeg' = 'jpg',\n  'image/png' = 'png',\n  'image/gif' = 'gif',\n  'image/webp' = 'webp',\n}\n\nconst storage = multer.diskStorage({\n  destination: (_, file: Express.Multer.File, callback: Function) => {\n    const mimetype = file.mimetype as unknown as keyof typeof MIME_TYPES_IMAGE;\n    if (MIME_TYPES_IMAGE[mimetype]) callback(null, `${join(__dirname, `../../public/uploads/images`)}`);\n    else callback(null, `${join(__dirname, `../../public/uploads/other`)}`);\n  },\n  filename: (_, file: IObject, callback: Function) => {\n    const mimetype = file.mimetype as unknown as keyof typeof MIME_TYPES_IMAGE;\n    const name = file.originalname.split(' ').join('_').replace('.', '_');\n    const extension = MIME_TYPES_IMAGE[mimetype];\n    if (!extension) callback(new Error('Only images allowed'));\n    const fullName = name + Date.now() + '.';\n    callback(null, fullName);\n  },\n});\n\nexport default multer({\n  storage: storage,\n  limits: {\n    fileSize: tailleMax,\n  },\n  fileFilter: (_, file: IObject, cb: Function) => {\n    const mimetype = file.mimetype as unknown as keyof typeof MIME_TYPES_IMAGE;\n    if (MIME_TYPES_IMAGE[mimetype]) cb(null, true);\n    else cb(null, false);\n  },\n}).fields([\n  {\n    name: 'file',\n    maxCount: 1,\n  },\n]);\n"]}