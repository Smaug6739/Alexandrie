{"version":3,"file":"Snowflake.js","sourceRoot":"","sources":["../../src/utils/Snowflake.ts"],"names":[],"mappings":";;;;;AAAA,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,MAAM,QAAQ,GAAG,EAAE,CAAC;AAEpB;;;;;;;;;;;;GAYG;AACH,MAAa,SAAS;IAmBpB;;OAEG;IACH,YAAmB,KAA6B;QArBhD;;;WAGG;QACH,+BAAa,EAAE,EAAC;QAEhB;;;WAGG;QACH,mCAAe;QAEf;;WAEG;QACH,iGAAiG;QACjG;;;;mBAAgB,IAAI,CAAC,WAAW;WAAC;QAM/B,+BAAA,IAAI,oBAAU,MAAM,CAAC,KAAK,YAAY,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAA,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,IAAW,KAAK;QACd,OAAO,+BAAA,IAAI,wBAAO,CAAC;IACrB,CAAC;IAED;;;;;;;;;;;OAWG;IACI,QAAQ,CAAC,EACd,SAAS,EACT,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,EACtB,QAAQ,GAAG,QAAQ,EACnB,SAAS,GAAG,SAAS,MACO,EAAE;;QAC9B,IAAI,SAAS,YAAY,IAAI;YAAE,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;aAClE,IAAI,OAAO,SAAS,KAAK,QAAQ;YAAE,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;aACjE,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;YACtC,MAAM,IAAI,SAAS,CAAC,oEAAoE,OAAO,SAAS,GAAG,CAAC,CAAC;SAC9G;QAED,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,IAAI,KAAK;YAAE,SAAS,GAAG,EAAE,CAAC;aACnE;YACH,SAAS,IAAG,2DAAA,CAAA,oEAAe,EAAf,KAAA,IAAiB,IAAA,CAAA,MAAA,IAAA,CAAA,CAAC;YAC9B,IAAI,+BAAA,IAAI,4BAAW,IAAI,KAAK;gBAAE,+BAAA,IAAI,wBAAc,EAAE,MAAA,CAAC;SACpD;QAED,4CAA4C;QAC5C,OAAO,CAAC,CAAC,SAAS,GAAG,+BAAA,IAAI,wBAAO,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,GAAG,GAAQ,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,GAAQ,CAAC,IAAI,GAAG,CAAC,GAAG,SAAS,CAAC;IAC3H,CAAC;IAED;;;;;;;;;OASG;IACI,WAAW,CAAC,EAAmB;QACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5B,OAAO;YACL,EAAE,EAAE,QAAQ;YACZ,SAAS,EAAE,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,+BAAA,IAAI,wBAAO;YAC1C,QAAQ,EAAE,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,GAAQ;YACtC,SAAS,EAAE,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,GAAQ;YACvC,SAAS,EAAE,QAAQ,GAAG,KAAe;YACrC,KAAK,EAAE,+BAAA,IAAI,wBAAO;SACnB,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,aAAa,CAAC,EAAmB;QACtC,OAAO,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG,+BAAA,IAAI,wBAAO,CAAC,CAAC;IACnD,CAAC;CACF;AAjGD,8BAiGC","sourcesContent":["const ProcessId = 1n;\nconst WorkerId = 0n;\n\n/**\n * A class for generating and deconstructing Twitter snowflakes.\n *\n * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake}\n * is a 64-bit unsigned integer with 4 result that have a fixed epoch value.\n *\n * If we have a snowflake `266241948824764416` we can represent it as binary:\n * ```\n * 64                                          22     17     12          0\n *  000000111011000111100001101001000101000000  00001  00000  000000000000\n *           number of ms since epoch           worker  pid    increment\n * ```\n */\nexport class Snowflake {\n  /**\n   * Internal incrementor for generating snowflakes\n   * @internal\n   */\n  #increment = 0n;\n\n  /**\n   * Internal reference of the epoch passed in the constructor\n   * @internal\n   */\n  #epoch: bigint;\n\n  /**\n   * Alias for {@link deconstruct}\n   */\n  // eslint-disable-next-line @typescript-eslint/unbound-method, @typescript-eslint/no-invalid-this\n  public decode = this.deconstruct;\n\n  /**\n   * @param epoch the epoch to use\n   */\n  public constructor(epoch: number | bigint | Date) {\n    this.#epoch = BigInt(epoch instanceof Date ? epoch.getTime() : epoch);\n  }\n\n  /**\n   * The epoch for this snowflake.\n   */\n  public get epoch(): bigint {\n    return this.#epoch;\n  }\n\n  /**\n   * Generates a snowflake given an epoch and optionally a timestamp\n   * @param options options to pass into the generator, see {@link SnowflakeGenerateOptions}\n   *\n   * **note** when `increment` is not provided it defaults to the private `increment` of the instance\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).generate();\n   * ```\n   * @returns A unique snowflake\n   */\n  public generate({\n    increment,\n    timestamp = Date.now(),\n    workerId = WorkerId,\n    processId = ProcessId,\n  }: SnowflakeGenerateOptions = {}) {\n    if (timestamp instanceof Date) timestamp = BigInt(timestamp.getTime());\n    else if (typeof timestamp === 'number') timestamp = BigInt(timestamp);\n    else if (typeof timestamp !== 'bigint') {\n      throw new TypeError(`\"timestamp\" argument must be a number, bigint, or Date (received ${typeof timestamp})`);\n    }\n\n    if (typeof increment === 'bigint' && increment >= 4095n) increment = 0n;\n    else {\n      increment = this.#increment++;\n      if (this.#increment >= 4095n) this.#increment = 0n;\n    }\n\n    // timestamp, workerId, processId, increment\n    return ((timestamp - this.#epoch) << 22n) | ((workerId & 0b11111n) << 17n) | ((processId & 0b11111n) << 12n) | increment;\n  }\n\n  /**\n   * Deconstructs a snowflake given a snowflake ID\n   * @param id the snowflake to deconstruct\n   * @returns a deconstructed snowflake\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).deconstruct('3971046231244935168');\n   * ```\n   */\n  public deconstruct(id: string | bigint): DeconstructedSnowflake {\n    const bigIntId = BigInt(id);\n    return {\n      id: bigIntId,\n      timestamp: (bigIntId >> 22n) + this.#epoch,\n      workerId: (bigIntId >> 17n) & 0b11111n,\n      processId: (bigIntId >> 12n) & 0b11111n,\n      increment: bigIntId & 0b111111111111n,\n      epoch: this.#epoch,\n    };\n  }\n\n  /**\n   * Retrieves the timestamp field's value from a snowflake.\n   * @param id The snowflake to get the timestamp value from.\n   * @returns The UNIX timestamp that is stored in `id`.\n   */\n  public timestampFrom(id: string | bigint): number {\n    return Number((BigInt(id) >> 22n) + this.#epoch);\n  }\n}\n\n/**\n * Options for Snowflake#generate\n */\nexport interface SnowflakeGenerateOptions {\n  /**\n   * Timestamp or date of the snowflake to generate\n   * @default Date.now()\n   */\n  timestamp?: number | bigint | Date;\n\n  /**\n   * The increment to use\n   * @default 0n\n   * @remark keep in mind that this bigint is auto-incremented between generate calls\n   */\n  increment?: bigint;\n\n  /**\n   * The worker ID to use, will be truncated to 5 bits (0-31)\n   * @default 0n\n   */\n  workerId?: bigint;\n\n  /**\n   * The process ID to use, will be truncated to 5 bits (0-31)\n   * @default 1n\n   */\n  processId?: bigint;\n}\n\n/**\n * Object returned by Snowflake#deconstruct\n */\nexport interface DeconstructedSnowflake {\n  /**\n   * The id in BigInt form\n   */\n  id: bigint;\n\n  /**\n   * The timestamp stored in the snowflake\n   */\n  timestamp: bigint;\n\n  /**\n   * The worker id stored in the snowflake\n   */\n  workerId: bigint;\n\n  /**\n   * The process id stored in the snowflake\n   */\n  processId: bigint;\n\n  /**\n   * The increment stored in the snowflake\n   */\n  increment: bigint;\n\n  /**\n   * The epoch to use in the snowflake\n   */\n  epoch: bigint;\n}\n"]}